# https://software.intel.com/en-us/articles/intel-mkl-link-line-advisor

CXX ?= g++
MKLROOT ?= /opt/intel/compilers_and_libraries_2016.1.150/linux/mkl
CXXFLAGS_EXTRA ?= -Wall -Wextra -std=c++0x -pipe -DUSE_NOSIGHUP
CXXFLAGS_OPTIMIZE ?= -O3 -march=native -mtune=native -DNDEBUG
LDFLAGS_EXTRA ?= -s
EXECUTABLE = vfem

LINK.o = $(LINK.cc)
CXXFLAGS += $(CXXFLAGS_EXTRA) $(CXXFLAGS_OPTIMIZE) -fopenmp -m64 -I${MKLROOT}/include -DUSE_MKL
LDFLAGS += $(LDFLAGS_EXTRA) -Wl,-rpath -Wl,${MKLROOT}/lib/intel64 -Wl,--no-as-needed -L${MKLROOT}/lib/intel64 -lmkl_intel_lp64 -lmkl_core -lmkl_gnu_thread -ldl -lpthread -lm -lrt
#LDFLAGS += $(LDFLAGS_EXTRA) -Wl,--start-group ${MKLROOT}/lib/intel64/libmkl_intel_lp64.a ${MKLROOT}/lib/intel64/libmkl_core.a ${MKLROOT}/lib/intel64/libmkl_gnu_thread.a -Wl,--end-group -ldl -lpthread -lm -lrt

SOURCES = \
	src/main.cpp \
	src/config/config.cpp \
	src/common/cubatures.cpp \
	src/geometry/vector3.cpp \
	src/elements/edge.cpp \
	src/elements/face.cpp \
	src/elements/triangle.cpp \
	src/elements/tetrahedron.cpp \
	src/elements/tetrahedron_pml.cpp \
	src/vfem/slae.cpp \
	src/vfem/vfem.cpp \
	src/vfem/vfem_input.cpp \
	src/vfem/vfem_output.cpp \
	src/vfem/vfem_v_cycle.cpp \
	src/problems/standard.cpp \
	src/problems/standard_pml.cpp \
	src/problems/analytical_cube.cpp \
	src/problems/loop_pml.cpp \
	src/problems/area_2layers_loop_pml.cpp \
	src/problems/area_2layers_loop_many_pml.cpp \
	src/problems/area_2layers_loop_universal_pml.cpp \
	src/problems/area_3layers_inc_loop_pml.cpp \
	src/problems/area_4layers_loop_pml.cpp \
	src/solvers/COCG_LLT_Smooth.cpp \
	src/solvers/COCG_LLT_Smooth_MKL.cpp
OBJECTS = $(SOURCES:.cpp=.o)

all: $(SOURCES) $(EXECUTABLE)

.PHONY: clean install

$(EXECUTABLE): $(OBJECTS)
	$(CXX) $(CXXFLAGS) $(OBJECTS) $(LDFLAGS) -o $@

.cpp.o:
	$(CXX) $(CXXFLAGS) -c $< -o $@

clean:
	rm -f $(OBJECTS) $(EXECUTABLE)

